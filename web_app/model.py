# -*- coding: utf-8 -*-
"""TA mbkm Watson kel1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vOgzdkNKgF19Ry8uYCNFCkv9GM_MVfNp
"""

!gdown https://drive.google.com/uc?id=15TwDbQGF8HxTtpK986rx3crFMBJ7zd1Y

!gdown https://drive.google.com/uc?id=17dqOaXsQzxAps163_z1Z8ic_ieWGnS12

import os
import zipfile
local_zip = '/content/drowsiness2a.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

import os
import zipfile
local_zip = '/content/haar_cascade.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

print('Total train open :', len(os.listdir('/content/drowsiness2/train/open')))
print('Total train closed :', len(os.listdir('/content/drowsiness2/train/closed')))
print('Total test open :', len(os.listdir('/content/drowsiness2/test/open')))
print('Total test closed :', len(os.listdir('/content/drowsiness2/test/closed')))

# Directory with our training dandelion pictures
train_open_dir = os.path.join('/content/drowsiness2/train/open')

# Directory with our training grass pictures
train_closed_dir = os.path.join('/content/drowsiness2/train/closed')

# Directory with our validation dandelion pictures
test_open_dir = os.path.join('/content/drowsiness2/test/open')

# Directory with our validation grass pictures
test_closed_dir = os.path.join('/content/drowsiness2/test/closed')

train_open_names = os.listdir(train_open_dir)
print(train_open_names[:10])

train_closed_names = os.listdir(train_closed_dir)
print(train_closed_names[:10])

test_open_names = os.listdir(test_open_dir)
print(test_open_names[:10])

test_closed_names = os.listdir(test_closed_dir)
print(test_closed_names[:10])

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Parameters for our graph; we'll output images in a 4x4 configuration
nrows = 4
ncols = 4

# Index for iterating over images
pic_index = 0

fig = plt.gcf()
fig.set_size_inches(ncols * 4, nrows * 4)

pic_index += 8
next_open_pic = [os.path.join(train_open_dir, fname) 
                for fname in train_open_names[pic_index-8:pic_index]]
next_closed_pic = [os.path.join(train_closed_dir, fname) 
                for fname in train_closed_names[pic_index-8:pic_index]]

for i, img_path in enumerate(next_open_pic + next_closed_pic):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') # Don't show axes (or gridlines)

  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

"""##Modelling"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
train_dir = os.path.join('/content/drowsiness2/train')
train_datagen = ImageDataGenerator(rescale=1./255,
    
    rotation_range=20,
    zoom_range=0.2,
    shear_range=0.2,
    fill_mode = 'nearest')

test_dir = os.path.join('/content/drowsiness2/test')
test_datagen = ImageDataGenerator(rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    shear_range=0.2,
    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(128, 128),
    batch_size=8,
    color_mode="grayscale",
    class_mode='binary') # untuk klasifikasi 2 kelas: 'binary', untuk banyak kelas: 'categorical'
    
valid_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(128, 128),
    batch_size=8,
    color_mode="grayscale",
    class_mode='binary') # untuk klasifikasi 2 kelas: 'binary', untuk banyak kelas: 'categorical'

import tensorflow as tf

model = tf.keras.models.Sequential([
    # Note the input shape is the desired size of the image 200x200 with 3 bytes color
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(128, 128, 1)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),  
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Conv2D(256, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.4),
    # Flatten the results to feed into a DNN
    tf.keras.layers.Flatten(),
    # 512 neuron hidden layer
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid') # ganti nilai 9 untuk output kelas yang diinginkan, ganti 'softmax' dengan 'sigmoid' untuk klasifikasi 2 kelas 
])

model.compile(optimizer=tf.optimizers.Adam(),
              loss='binary_crossentropy', # untuk klasifikasi 2 kelas: 'binary_crossentropy', untuk banyak kelas: 'categorical_crossentropy'
              metrics = ['accuracy'])

history = model.fit(train_generator,
                    #steps_per_epoch=8,
                    epochs=20,
                    verbose=2,
                    validation_data=valid_generator
                    #validation_steps=8
                    )

model.save('model.h5')

"""# Evaluate"""

model.evaluate(valid_generator)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'valid'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'valid'], loc='upper left')
plt.show()

"""#Prediction"""

valid_generator.class_indices

import numpy as np
import cv2
#from google.colab import files
from keras.preprocessing import image

leye = cv2.CascadeClassifier('haar_cascade/haarcascade_lefteye_2splits.xml')
reye = cv2.CascadeClassifier('haar_cascade/haarcascade_righteye_2splits.xml')

uploaded = files.upload()
for filename in uploaded.keys():
  path = '/content/' + filename
  image = cv2.imread(path)
  gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

  right_eye = reye.detectMultiScale(gray_img)

  for (x,y,w,h) in right_eye:
    cv2.rectangle(image,(x,y),(x+w,y+h),(255,0,0),2)
    eye_output = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    plt.imshow(eye_output)

    r_eye=image[y:y+h,x:x+w]
    #r_eye = cv2.rectangle(image,(x,y),(x+w,y+h),(255,0,0),2)
    r_eye = cv2.cvtColor(r_eye,cv2.COLOR_BGR2GRAY)
    r_eye = cv2.resize(r_eye,(128, 128))
    r_eye = r_eye/255
    r_eye = r_eye.reshape(128, 128, -1)
    r_eye = np.expand_dims(r_eye,axis=0)
    rpred = model.predict(r_eye)
    if rpred[0]<0.5:
      print(filename + " ini adalah tertutup")
    else:
      print(filename + " ini adalah terbuka")
    break

# Commented out IPython magic to ensure Python compatibility.
from re import X
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
#from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():
 
  # predicting images
  path = '/content/' + fn
  img = image.load_img(path, target_size=(128, 128))
  rgb_x = image.img_to_array(img)
  x = cv2.cvtColor(rgb_x, cv2.COLOR_BGR2GRAY)
  plt.imshow(rgb_x/255.)
  x = np.expand_dims(x, axis=0)
  image = np.vstack([x])
  classes = model.predict(image)
  print(np.argmax(classes))
  if classes[0]<0.5:
    print(fn + " ini adalah tertutup")
  else:
    print(fn + " ini adalah terbuka")